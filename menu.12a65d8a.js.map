{"version":3,"file":"menu.12a65d8a.js","sources":["../node_modules/@greenwood/plugin-graphql/src/core/common.js","../node_modules/@greenwood/cli/src/lib/hashing-utils.js","../node_modules/@greenwood/plugin-graphql/src/core/client.js","../node_modules/@greenwood/plugin-graphql/src/queries/menu.gql"],"sourcesContent":["import { hashString } from '@greenwood/cli/src/lib/hashing-utils.js';\n\nfunction getQueryHash(query, variables = {}) {\n  const queryKeys = query;\n  const variableValues = Object.keys(variables).length > 0\n    ? `_${Object.values(variables).join('').replace(/\\//g, '')}` // handle / which will translate to filepaths\n    : '';\n\n  return hashString(`${queryKeys}${variableValues}`);\n}\n\nexport {\n  getQueryHash\n};","// https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0#gistcomment-2775538\nfunction hashString(inputString) {\n  let h = 0;\n\n  for (let i = 0; i < inputString.length; i += 1) {\n    h = Math.imul(31, h) + inputString.charCodeAt(i) | 0; // eslint-disable-line no-bitwise\n  }\n\n  return Math.abs(h).toString();\n}\n\nexport {\n  hashString\n};","import { getQueryHash } from '@greenwood/plugin-graphql/core/common';\n\nconst client = {\n  query: (params) => {\n    const { query, variables = {} } = params;\n\n    return fetch('http://localhost:4000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables\n      })\n    }).then((response) => response.json());\n  }\n};\n\nconst APOLLO_STATE = window.__APOLLO_STATE__; // eslint-disable-line no-underscore-dangle\nconst backupQuery = client.query;\n\nclient.query = (params) => {\n  if (APOLLO_STATE) {\n    // __APOLLO_STATE__ defined, in production mode\n    const queryHash = getQueryHash(params.query, params.variables);\n    const cachePath = `/${queryHash}-cache.json`;\n    \n    return fetch(cachePath)\n      .then(response => response.json())\n      .then((response) => {\n        return {\n          data: response\n        };\n      });\n  } else {\n    // __APOLLO_STATE__ NOT defined, in development mode\n    return backupQuery(params);\n  }\n};\n\nexport default client;","\n      export default `query($name: String, $route: String, $order: MenuOrderBy) {\n  menu(name: $name, pathname: $route, orderBy: $order) {\n    item {\n      label,\n      route\n    }\n    children {\n      item {\n        label,\n        route\n      },\n      children {\n        item {\n          label,\n          route\n        }\n      }\n    }\n  }\n}`;\n    "],"names":["getQueryHash","query","variables","inputString","h","i","length","Math","imul","charCodeAt","abs","toString","hashString","Object","keys","values","join","replace","client","params","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","APOLLO_STATE","window","__APOLLO_STATE__","backupQuery","queryHash","data","MenuQuery"],"mappings":"AAEA,SAASA,EAAaC,EAAOC,EAAY,IAMvC,OCPF,SAAoBC,GAClB,IAAIC,EAAI,EAER,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,GAAK,EAC3CD,EAAIG,KAAKC,KAAK,GAAIJ,GAAKD,EAAYM,WAAWJ,GAAK,EAGrD,OAAOE,KAAKG,IAAIN,GAAGO,UACrB,CDDSC,CAAW,GALAX,IACKY,OAAOC,KAAKZ,GAAWI,OAAS,EACnD,IAAIO,OAAOE,OAAOb,GAAWc,KAAK,IAAIC,QAAQ,MAAO,MACrD,KAGN,CEPK,MAACC,EAAS,CACbjB,MAAQkB,IACN,MAAMlB,MAAEA,EAAKC,UAAEA,EAAY,CAAE,GAAKiB,EAElC,OAAOC,MAAM,gCAAiC,CAC5CC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAU,oBAEZC,KAAMC,KAAKC,UAAU,CACnBzB,QACAC,gBAEDyB,MAAMC,GAAaA,EAASC,QAAO,GAIpCC,EAAeC,OAAOC,iBACtBC,EAAcf,EAAOjB,MAE3BiB,EAAOjB,MAASkB,IACd,GAAIW,EAAc,CAEhB,MAAMI,EAAYlC,EAAamB,EAAOlB,MAAOkB,EAAOjB,WAGpD,OAAOkB,MAFW,IAAIc,gBAGnBP,MAAKC,GAAYA,EAASC,SAC1BF,MAAMC,IACE,CACLO,KAAMP,KAGhB,CAEI,OAAOK,EAAYd,EACpB,ECtCG,IAAAiB,EAAe"}